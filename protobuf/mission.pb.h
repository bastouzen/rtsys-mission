// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mission.proto

#ifndef PROTOBUF_INCLUDED_mission_2eproto
#define PROTOBUF_INCLUDED_mission_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mission_2eproto 

namespace protobuf_mission_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mission_2eproto
namespace pb {
namespace mission {
class Mission;
class MissionDefaultTypeInternal;
extern MissionDefaultTypeInternal _Mission_default_instance_;
class Mission_Collection;
class Mission_CollectionDefaultTypeInternal;
extern Mission_CollectionDefaultTypeInternal _Mission_Collection_default_instance_;
class Mission_Component;
class Mission_ComponentDefaultTypeInternal;
extern Mission_ComponentDefaultTypeInternal _Mission_Component_default_instance_;
class Mission_Element;
class Mission_ElementDefaultTypeInternal;
extern Mission_ElementDefaultTypeInternal _Mission_Element_default_instance_;
class Mission_Element_Point;
class Mission_Element_PointDefaultTypeInternal;
extern Mission_Element_PointDefaultTypeInternal _Mission_Element_Point_default_instance_;
class Mission_Element_Rail;
class Mission_Element_RailDefaultTypeInternal;
extern Mission_Element_RailDefaultTypeInternal _Mission_Element_Rail_default_instance_;
class Mission_Element_Segment;
class Mission_Element_SegmentDefaultTypeInternal;
extern Mission_Element_SegmentDefaultTypeInternal _Mission_Element_Segment_default_instance_;
}  // namespace mission
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::mission::Mission* Arena::CreateMaybeMessage<::pb::mission::Mission>(Arena*);
template<> ::pb::mission::Mission_Collection* Arena::CreateMaybeMessage<::pb::mission::Mission_Collection>(Arena*);
template<> ::pb::mission::Mission_Component* Arena::CreateMaybeMessage<::pb::mission::Mission_Component>(Arena*);
template<> ::pb::mission::Mission_Element* Arena::CreateMaybeMessage<::pb::mission::Mission_Element>(Arena*);
template<> ::pb::mission::Mission_Element_Point* Arena::CreateMaybeMessage<::pb::mission::Mission_Element_Point>(Arena*);
template<> ::pb::mission::Mission_Element_Rail* Arena::CreateMaybeMessage<::pb::mission::Mission_Element_Rail>(Arena*);
template<> ::pb::mission::Mission_Element_Segment* Arena::CreateMaybeMessage<::pb::mission::Mission_Element_Segment>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {
namespace mission {

// ===================================================================

class Mission_Element_Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.mission.Mission.Element.Point) */ {
 public:
  Mission_Element_Point();
  virtual ~Mission_Element_Point();

  Mission_Element_Point(const Mission_Element_Point& from);

  inline Mission_Element_Point& operator=(const Mission_Element_Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mission_Element_Point(Mission_Element_Point&& from) noexcept
    : Mission_Element_Point() {
    *this = ::std::move(from);
  }

  inline Mission_Element_Point& operator=(Mission_Element_Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission_Element_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission_Element_Point* internal_default_instance() {
    return reinterpret_cast<const Mission_Element_Point*>(
               &_Mission_Element_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Mission_Element_Point* other);
  friend void swap(Mission_Element_Point& a, Mission_Element_Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mission_Element_Point* New() const final {
    return CreateMaybeMessage<Mission_Element_Point>(NULL);
  }

  Mission_Element_Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mission_Element_Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mission_Element_Point& from);
  void MergeFrom(const Mission_Element_Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mission_Element_Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.mission.Mission.Element.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mission_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mission_Element_Rail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.mission.Mission.Element.Rail) */ {
 public:
  Mission_Element_Rail();
  virtual ~Mission_Element_Rail();

  Mission_Element_Rail(const Mission_Element_Rail& from);

  inline Mission_Element_Rail& operator=(const Mission_Element_Rail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mission_Element_Rail(Mission_Element_Rail&& from) noexcept
    : Mission_Element_Rail() {
    *this = ::std::move(from);
  }

  inline Mission_Element_Rail& operator=(Mission_Element_Rail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission_Element_Rail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission_Element_Rail* internal_default_instance() {
    return reinterpret_cast<const Mission_Element_Rail*>(
               &_Mission_Element_Rail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Mission_Element_Rail* other);
  friend void swap(Mission_Element_Rail& a, Mission_Element_Rail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mission_Element_Rail* New() const final {
    return CreateMaybeMessage<Mission_Element_Rail>(NULL);
  }

  Mission_Element_Rail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mission_Element_Rail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mission_Element_Rail& from);
  void MergeFrom(const Mission_Element_Rail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mission_Element_Rail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .pb.mission.Mission.Element.Point p0 = 2;
  bool has_p0() const;
  void clear_p0();
  static const int kP0FieldNumber = 2;
  private:
  const ::pb::mission::Mission_Element_Point& _internal_p0() const;
  public:
  const ::pb::mission::Mission_Element_Point& p0() const;
  ::pb::mission::Mission_Element_Point* release_p0();
  ::pb::mission::Mission_Element_Point* mutable_p0();
  void set_allocated_p0(::pb::mission::Mission_Element_Point* p0);

  // .pb.mission.Mission.Element.Point p1 = 3;
  bool has_p1() const;
  void clear_p1();
  static const int kP1FieldNumber = 3;
  private:
  const ::pb::mission::Mission_Element_Point& _internal_p1() const;
  public:
  const ::pb::mission::Mission_Element_Point& p1() const;
  ::pb::mission::Mission_Element_Point* release_p1();
  ::pb::mission::Mission_Element_Point* mutable_p1();
  void set_allocated_p1(::pb::mission::Mission_Element_Point* p1);

  // @@protoc_insertion_point(class_scope:pb.mission.Mission.Element.Rail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pb::mission::Mission_Element_Point* p0_;
  ::pb::mission::Mission_Element_Point* p1_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mission_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mission_Element_Segment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.mission.Mission.Element.Segment) */ {
 public:
  Mission_Element_Segment();
  virtual ~Mission_Element_Segment();

  Mission_Element_Segment(const Mission_Element_Segment& from);

  inline Mission_Element_Segment& operator=(const Mission_Element_Segment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mission_Element_Segment(Mission_Element_Segment&& from) noexcept
    : Mission_Element_Segment() {
    *this = ::std::move(from);
  }

  inline Mission_Element_Segment& operator=(Mission_Element_Segment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission_Element_Segment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission_Element_Segment* internal_default_instance() {
    return reinterpret_cast<const Mission_Element_Segment*>(
               &_Mission_Element_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Mission_Element_Segment* other);
  friend void swap(Mission_Element_Segment& a, Mission_Element_Segment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mission_Element_Segment* New() const final {
    return CreateMaybeMessage<Mission_Element_Segment>(NULL);
  }

  Mission_Element_Segment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mission_Element_Segment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mission_Element_Segment& from);
  void MergeFrom(const Mission_Element_Segment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mission_Element_Segment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .pb.mission.Mission.Element.Point p0 = 2;
  bool has_p0() const;
  void clear_p0();
  static const int kP0FieldNumber = 2;
  private:
  const ::pb::mission::Mission_Element_Point& _internal_p0() const;
  public:
  const ::pb::mission::Mission_Element_Point& p0() const;
  ::pb::mission::Mission_Element_Point* release_p0();
  ::pb::mission::Mission_Element_Point* mutable_p0();
  void set_allocated_p0(::pb::mission::Mission_Element_Point* p0);

  // .pb.mission.Mission.Element.Point p1 = 3;
  bool has_p1() const;
  void clear_p1();
  static const int kP1FieldNumber = 3;
  private:
  const ::pb::mission::Mission_Element_Point& _internal_p1() const;
  public:
  const ::pb::mission::Mission_Element_Point& p1() const;
  ::pb::mission::Mission_Element_Point* release_p1();
  ::pb::mission::Mission_Element_Point* mutable_p1();
  void set_allocated_p1(::pb::mission::Mission_Element_Point* p1);

  // @@protoc_insertion_point(class_scope:pb.mission.Mission.Element.Segment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pb::mission::Mission_Element_Point* p0_;
  ::pb::mission::Mission_Element_Point* p1_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mission_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mission_Element : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.mission.Mission.Element) */ {
 public:
  Mission_Element();
  virtual ~Mission_Element();

  Mission_Element(const Mission_Element& from);

  inline Mission_Element& operator=(const Mission_Element& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mission_Element(Mission_Element&& from) noexcept
    : Mission_Element() {
    *this = ::std::move(from);
  }

  inline Mission_Element& operator=(Mission_Element&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission_Element& default_instance();

  enum ElementCase {
    kPoint = 1,
    kRail = 2,
    kSegment = 3,
    ELEMENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission_Element* internal_default_instance() {
    return reinterpret_cast<const Mission_Element*>(
               &_Mission_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Mission_Element* other);
  friend void swap(Mission_Element& a, Mission_Element& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mission_Element* New() const final {
    return CreateMaybeMessage<Mission_Element>(NULL);
  }

  Mission_Element* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mission_Element>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mission_Element& from);
  void MergeFrom(const Mission_Element& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mission_Element* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Mission_Element_Point Point;
  typedef Mission_Element_Rail Rail;
  typedef Mission_Element_Segment Segment;

  // accessors -------------------------------------------------------

  // .pb.mission.Mission.Element.Point point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  private:
  const ::pb::mission::Mission_Element_Point& _internal_point() const;
  public:
  const ::pb::mission::Mission_Element_Point& point() const;
  ::pb::mission::Mission_Element_Point* release_point();
  ::pb::mission::Mission_Element_Point* mutable_point();
  void set_allocated_point(::pb::mission::Mission_Element_Point* point);

  // .pb.mission.Mission.Element.Rail rail = 2;
  bool has_rail() const;
  void clear_rail();
  static const int kRailFieldNumber = 2;
  private:
  const ::pb::mission::Mission_Element_Rail& _internal_rail() const;
  public:
  const ::pb::mission::Mission_Element_Rail& rail() const;
  ::pb::mission::Mission_Element_Rail* release_rail();
  ::pb::mission::Mission_Element_Rail* mutable_rail();
  void set_allocated_rail(::pb::mission::Mission_Element_Rail* rail);

  // .pb.mission.Mission.Element.Segment segment = 3;
  bool has_segment() const;
  void clear_segment();
  static const int kSegmentFieldNumber = 3;
  private:
  const ::pb::mission::Mission_Element_Segment& _internal_segment() const;
  public:
  const ::pb::mission::Mission_Element_Segment& segment() const;
  ::pb::mission::Mission_Element_Segment* release_segment();
  ::pb::mission::Mission_Element_Segment* mutable_segment();
  void set_allocated_segment(::pb::mission::Mission_Element_Segment* segment);

  void clear_element();
  ElementCase element_case() const;
  // @@protoc_insertion_point(class_scope:pb.mission.Mission.Element)
 private:
  void set_has_point();
  void set_has_rail();
  void set_has_segment();

  inline bool has_element() const;
  inline void clear_has_element();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ElementUnion {
    ElementUnion() {}
    ::pb::mission::Mission_Element_Point* point_;
    ::pb::mission::Mission_Element_Rail* rail_;
    ::pb::mission::Mission_Element_Segment* segment_;
  } element_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_mission_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mission_Collection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.mission.Mission.Collection) */ {
 public:
  Mission_Collection();
  virtual ~Mission_Collection();

  Mission_Collection(const Mission_Collection& from);

  inline Mission_Collection& operator=(const Mission_Collection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mission_Collection(Mission_Collection&& from) noexcept
    : Mission_Collection() {
    *this = ::std::move(from);
  }

  inline Mission_Collection& operator=(Mission_Collection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission_Collection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission_Collection* internal_default_instance() {
    return reinterpret_cast<const Mission_Collection*>(
               &_Mission_Collection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Mission_Collection* other);
  friend void swap(Mission_Collection& a, Mission_Collection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mission_Collection* New() const final {
    return CreateMaybeMessage<Mission_Collection>(NULL);
  }

  Mission_Collection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mission_Collection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mission_Collection& from);
  void MergeFrom(const Mission_Collection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mission_Collection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.mission.Mission.Element elements = 2;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 2;
  ::pb::mission::Mission_Element* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Element >*
      mutable_elements();
  const ::pb::mission::Mission_Element& elements(int index) const;
  ::pb::mission::Mission_Element* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Element >&
      elements() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.mission.Mission.Collection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Element > elements_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mission_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mission_Component : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.mission.Mission.Component) */ {
 public:
  Mission_Component();
  virtual ~Mission_Component();

  Mission_Component(const Mission_Component& from);

  inline Mission_Component& operator=(const Mission_Component& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mission_Component(Mission_Component&& from) noexcept
    : Mission_Component() {
    *this = ::std::move(from);
  }

  inline Mission_Component& operator=(Mission_Component&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission_Component& default_instance();

  enum ComponentCase {
    kElement = 1,
    kCollection = 2,
    COMPONENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission_Component* internal_default_instance() {
    return reinterpret_cast<const Mission_Component*>(
               &_Mission_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Mission_Component* other);
  friend void swap(Mission_Component& a, Mission_Component& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mission_Component* New() const final {
    return CreateMaybeMessage<Mission_Component>(NULL);
  }

  Mission_Component* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mission_Component>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mission_Component& from);
  void MergeFrom(const Mission_Component& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mission_Component* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.mission.Mission.Element element = 1;
  bool has_element() const;
  void clear_element();
  static const int kElementFieldNumber = 1;
  private:
  const ::pb::mission::Mission_Element& _internal_element() const;
  public:
  const ::pb::mission::Mission_Element& element() const;
  ::pb::mission::Mission_Element* release_element();
  ::pb::mission::Mission_Element* mutable_element();
  void set_allocated_element(::pb::mission::Mission_Element* element);

  // .pb.mission.Mission.Collection collection = 2;
  bool has_collection() const;
  void clear_collection();
  static const int kCollectionFieldNumber = 2;
  private:
  const ::pb::mission::Mission_Collection& _internal_collection() const;
  public:
  const ::pb::mission::Mission_Collection& collection() const;
  ::pb::mission::Mission_Collection* release_collection();
  ::pb::mission::Mission_Collection* mutable_collection();
  void set_allocated_collection(::pb::mission::Mission_Collection* collection);

  void clear_component();
  ComponentCase component_case() const;
  // @@protoc_insertion_point(class_scope:pb.mission.Mission.Component)
 private:
  void set_has_element();
  void set_has_collection();

  inline bool has_component() const;
  inline void clear_has_component();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ComponentUnion {
    ComponentUnion() {}
    ::pb::mission::Mission_Element* element_;
    ::pb::mission::Mission_Collection* collection_;
  } component_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_mission_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.mission.Mission) */ {
 public:
  Mission();
  virtual ~Mission();

  Mission(const Mission& from);

  inline Mission& operator=(const Mission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mission(Mission&& from) noexcept
    : Mission() {
    *this = ::std::move(from);
  }

  inline Mission& operator=(Mission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission* internal_default_instance() {
    return reinterpret_cast<const Mission*>(
               &_Mission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Mission* other);
  friend void swap(Mission& a, Mission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mission* New() const final {
    return CreateMaybeMessage<Mission>(NULL);
  }

  Mission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mission& from);
  void MergeFrom(const Mission& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Mission_Element Element;
  typedef Mission_Collection Collection;
  typedef Mission_Component Component;

  // accessors -------------------------------------------------------

  // repeated .pb.mission.Mission.Component components = 2;
  int components_size() const;
  void clear_components();
  static const int kComponentsFieldNumber = 2;
  ::pb::mission::Mission_Component* mutable_components(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Component >*
      mutable_components();
  const ::pb::mission::Mission_Component& components(int index) const;
  ::pb::mission::Mission_Component* add_components();
  const ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Component >&
      components() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.mission.Mission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Component > components_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mission_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mission_Element_Point

// string name = 1;
inline void Mission_Element_Point::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mission_Element_Point::name() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.Point.name)
  return name_.GetNoArena();
}
inline void Mission_Element_Point::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.mission.Mission.Element.Point.name)
}
#if LANG_CXX11
inline void Mission_Element_Point::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.mission.Mission.Element.Point.name)
}
#endif
inline void Mission_Element_Point::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.mission.Mission.Element.Point.name)
}
inline void Mission_Element_Point::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.mission.Mission.Element.Point.name)
}
inline ::std::string* Mission_Element_Point::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.Point.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mission_Element_Point::release_name() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.Point.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mission_Element_Point::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.mission.Mission.Element.Point.name)
}

// -------------------------------------------------------------------

// Mission_Element_Rail

// string name = 1;
inline void Mission_Element_Rail::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mission_Element_Rail::name() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.Rail.name)
  return name_.GetNoArena();
}
inline void Mission_Element_Rail::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.mission.Mission.Element.Rail.name)
}
#if LANG_CXX11
inline void Mission_Element_Rail::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.mission.Mission.Element.Rail.name)
}
#endif
inline void Mission_Element_Rail::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.mission.Mission.Element.Rail.name)
}
inline void Mission_Element_Rail::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.mission.Mission.Element.Rail.name)
}
inline ::std::string* Mission_Element_Rail::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.Rail.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mission_Element_Rail::release_name() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.Rail.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mission_Element_Rail::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.mission.Mission.Element.Rail.name)
}

// .pb.mission.Mission.Element.Point p0 = 2;
inline bool Mission_Element_Rail::has_p0() const {
  return this != internal_default_instance() && p0_ != NULL;
}
inline void Mission_Element_Rail::clear_p0() {
  if (GetArenaNoVirtual() == NULL && p0_ != NULL) {
    delete p0_;
  }
  p0_ = NULL;
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element_Rail::_internal_p0() const {
  return *p0_;
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element_Rail::p0() const {
  const ::pb::mission::Mission_Element_Point* p = p0_;
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.Rail.p0)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::mission::Mission_Element_Point*>(
      &::pb::mission::_Mission_Element_Point_default_instance_);
}
inline ::pb::mission::Mission_Element_Point* Mission_Element_Rail::release_p0() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.Rail.p0)
  
  ::pb::mission::Mission_Element_Point* temp = p0_;
  p0_ = NULL;
  return temp;
}
inline ::pb::mission::Mission_Element_Point* Mission_Element_Rail::mutable_p0() {
  
  if (p0_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::mission::Mission_Element_Point>(GetArenaNoVirtual());
    p0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.Rail.p0)
  return p0_;
}
inline void Mission_Element_Rail::set_allocated_p0(::pb::mission::Mission_Element_Point* p0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p0_;
  }
  if (p0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p0, submessage_arena);
    }
    
  } else {
    
  }
  p0_ = p0;
  // @@protoc_insertion_point(field_set_allocated:pb.mission.Mission.Element.Rail.p0)
}

// .pb.mission.Mission.Element.Point p1 = 3;
inline bool Mission_Element_Rail::has_p1() const {
  return this != internal_default_instance() && p1_ != NULL;
}
inline void Mission_Element_Rail::clear_p1() {
  if (GetArenaNoVirtual() == NULL && p1_ != NULL) {
    delete p1_;
  }
  p1_ = NULL;
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element_Rail::_internal_p1() const {
  return *p1_;
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element_Rail::p1() const {
  const ::pb::mission::Mission_Element_Point* p = p1_;
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.Rail.p1)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::mission::Mission_Element_Point*>(
      &::pb::mission::_Mission_Element_Point_default_instance_);
}
inline ::pb::mission::Mission_Element_Point* Mission_Element_Rail::release_p1() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.Rail.p1)
  
  ::pb::mission::Mission_Element_Point* temp = p1_;
  p1_ = NULL;
  return temp;
}
inline ::pb::mission::Mission_Element_Point* Mission_Element_Rail::mutable_p1() {
  
  if (p1_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::mission::Mission_Element_Point>(GetArenaNoVirtual());
    p1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.Rail.p1)
  return p1_;
}
inline void Mission_Element_Rail::set_allocated_p1(::pb::mission::Mission_Element_Point* p1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p1_;
  }
  if (p1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p1, submessage_arena);
    }
    
  } else {
    
  }
  p1_ = p1;
  // @@protoc_insertion_point(field_set_allocated:pb.mission.Mission.Element.Rail.p1)
}

// -------------------------------------------------------------------

// Mission_Element_Segment

// string name = 1;
inline void Mission_Element_Segment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mission_Element_Segment::name() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.Segment.name)
  return name_.GetNoArena();
}
inline void Mission_Element_Segment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.mission.Mission.Element.Segment.name)
}
#if LANG_CXX11
inline void Mission_Element_Segment::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.mission.Mission.Element.Segment.name)
}
#endif
inline void Mission_Element_Segment::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.mission.Mission.Element.Segment.name)
}
inline void Mission_Element_Segment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.mission.Mission.Element.Segment.name)
}
inline ::std::string* Mission_Element_Segment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.Segment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mission_Element_Segment::release_name() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.Segment.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mission_Element_Segment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.mission.Mission.Element.Segment.name)
}

// .pb.mission.Mission.Element.Point p0 = 2;
inline bool Mission_Element_Segment::has_p0() const {
  return this != internal_default_instance() && p0_ != NULL;
}
inline void Mission_Element_Segment::clear_p0() {
  if (GetArenaNoVirtual() == NULL && p0_ != NULL) {
    delete p0_;
  }
  p0_ = NULL;
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element_Segment::_internal_p0() const {
  return *p0_;
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element_Segment::p0() const {
  const ::pb::mission::Mission_Element_Point* p = p0_;
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.Segment.p0)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::mission::Mission_Element_Point*>(
      &::pb::mission::_Mission_Element_Point_default_instance_);
}
inline ::pb::mission::Mission_Element_Point* Mission_Element_Segment::release_p0() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.Segment.p0)
  
  ::pb::mission::Mission_Element_Point* temp = p0_;
  p0_ = NULL;
  return temp;
}
inline ::pb::mission::Mission_Element_Point* Mission_Element_Segment::mutable_p0() {
  
  if (p0_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::mission::Mission_Element_Point>(GetArenaNoVirtual());
    p0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.Segment.p0)
  return p0_;
}
inline void Mission_Element_Segment::set_allocated_p0(::pb::mission::Mission_Element_Point* p0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p0_;
  }
  if (p0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p0, submessage_arena);
    }
    
  } else {
    
  }
  p0_ = p0;
  // @@protoc_insertion_point(field_set_allocated:pb.mission.Mission.Element.Segment.p0)
}

// .pb.mission.Mission.Element.Point p1 = 3;
inline bool Mission_Element_Segment::has_p1() const {
  return this != internal_default_instance() && p1_ != NULL;
}
inline void Mission_Element_Segment::clear_p1() {
  if (GetArenaNoVirtual() == NULL && p1_ != NULL) {
    delete p1_;
  }
  p1_ = NULL;
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element_Segment::_internal_p1() const {
  return *p1_;
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element_Segment::p1() const {
  const ::pb::mission::Mission_Element_Point* p = p1_;
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.Segment.p1)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::mission::Mission_Element_Point*>(
      &::pb::mission::_Mission_Element_Point_default_instance_);
}
inline ::pb::mission::Mission_Element_Point* Mission_Element_Segment::release_p1() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.Segment.p1)
  
  ::pb::mission::Mission_Element_Point* temp = p1_;
  p1_ = NULL;
  return temp;
}
inline ::pb::mission::Mission_Element_Point* Mission_Element_Segment::mutable_p1() {
  
  if (p1_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::mission::Mission_Element_Point>(GetArenaNoVirtual());
    p1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.Segment.p1)
  return p1_;
}
inline void Mission_Element_Segment::set_allocated_p1(::pb::mission::Mission_Element_Point* p1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p1_;
  }
  if (p1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p1, submessage_arena);
    }
    
  } else {
    
  }
  p1_ = p1;
  // @@protoc_insertion_point(field_set_allocated:pb.mission.Mission.Element.Segment.p1)
}

// -------------------------------------------------------------------

// Mission_Element

// .pb.mission.Mission.Element.Point point = 1;
inline bool Mission_Element::has_point() const {
  return element_case() == kPoint;
}
inline void Mission_Element::set_has_point() {
  _oneof_case_[0] = kPoint;
}
inline void Mission_Element::clear_point() {
  if (has_point()) {
    delete element_.point_;
    clear_has_element();
  }
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element::_internal_point() const {
  return *element_.point_;
}
inline ::pb::mission::Mission_Element_Point* Mission_Element::release_point() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.point)
  if (has_point()) {
    clear_has_element();
      ::pb::mission::Mission_Element_Point* temp = element_.point_;
    element_.point_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::mission::Mission_Element_Point& Mission_Element::point() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.point)
  return has_point()
      ? *element_.point_
      : *reinterpret_cast< ::pb::mission::Mission_Element_Point*>(&::pb::mission::_Mission_Element_Point_default_instance_);
}
inline ::pb::mission::Mission_Element_Point* Mission_Element::mutable_point() {
  if (!has_point()) {
    clear_element();
    set_has_point();
    element_.point_ = CreateMaybeMessage< ::pb::mission::Mission_Element_Point >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.point)
  return element_.point_;
}

// .pb.mission.Mission.Element.Rail rail = 2;
inline bool Mission_Element::has_rail() const {
  return element_case() == kRail;
}
inline void Mission_Element::set_has_rail() {
  _oneof_case_[0] = kRail;
}
inline void Mission_Element::clear_rail() {
  if (has_rail()) {
    delete element_.rail_;
    clear_has_element();
  }
}
inline const ::pb::mission::Mission_Element_Rail& Mission_Element::_internal_rail() const {
  return *element_.rail_;
}
inline ::pb::mission::Mission_Element_Rail* Mission_Element::release_rail() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.rail)
  if (has_rail()) {
    clear_has_element();
      ::pb::mission::Mission_Element_Rail* temp = element_.rail_;
    element_.rail_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::mission::Mission_Element_Rail& Mission_Element::rail() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.rail)
  return has_rail()
      ? *element_.rail_
      : *reinterpret_cast< ::pb::mission::Mission_Element_Rail*>(&::pb::mission::_Mission_Element_Rail_default_instance_);
}
inline ::pb::mission::Mission_Element_Rail* Mission_Element::mutable_rail() {
  if (!has_rail()) {
    clear_element();
    set_has_rail();
    element_.rail_ = CreateMaybeMessage< ::pb::mission::Mission_Element_Rail >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.rail)
  return element_.rail_;
}

// .pb.mission.Mission.Element.Segment segment = 3;
inline bool Mission_Element::has_segment() const {
  return element_case() == kSegment;
}
inline void Mission_Element::set_has_segment() {
  _oneof_case_[0] = kSegment;
}
inline void Mission_Element::clear_segment() {
  if (has_segment()) {
    delete element_.segment_;
    clear_has_element();
  }
}
inline const ::pb::mission::Mission_Element_Segment& Mission_Element::_internal_segment() const {
  return *element_.segment_;
}
inline ::pb::mission::Mission_Element_Segment* Mission_Element::release_segment() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Element.segment)
  if (has_segment()) {
    clear_has_element();
      ::pb::mission::Mission_Element_Segment* temp = element_.segment_;
    element_.segment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::mission::Mission_Element_Segment& Mission_Element::segment() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Element.segment)
  return has_segment()
      ? *element_.segment_
      : *reinterpret_cast< ::pb::mission::Mission_Element_Segment*>(&::pb::mission::_Mission_Element_Segment_default_instance_);
}
inline ::pb::mission::Mission_Element_Segment* Mission_Element::mutable_segment() {
  if (!has_segment()) {
    clear_element();
    set_has_segment();
    element_.segment_ = CreateMaybeMessage< ::pb::mission::Mission_Element_Segment >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Element.segment)
  return element_.segment_;
}

inline bool Mission_Element::has_element() const {
  return element_case() != ELEMENT_NOT_SET;
}
inline void Mission_Element::clear_has_element() {
  _oneof_case_[0] = ELEMENT_NOT_SET;
}
inline Mission_Element::ElementCase Mission_Element::element_case() const {
  return Mission_Element::ElementCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Mission_Collection

// string name = 1;
inline void Mission_Collection::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mission_Collection::name() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Collection.name)
  return name_.GetNoArena();
}
inline void Mission_Collection::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.mission.Mission.Collection.name)
}
#if LANG_CXX11
inline void Mission_Collection::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.mission.Mission.Collection.name)
}
#endif
inline void Mission_Collection::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.mission.Mission.Collection.name)
}
inline void Mission_Collection::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.mission.Mission.Collection.name)
}
inline ::std::string* Mission_Collection::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Collection.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mission_Collection::release_name() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Collection.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mission_Collection::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.mission.Mission.Collection.name)
}

// repeated .pb.mission.Mission.Element elements = 2;
inline int Mission_Collection::elements_size() const {
  return elements_.size();
}
inline void Mission_Collection::clear_elements() {
  elements_.Clear();
}
inline ::pb::mission::Mission_Element* Mission_Collection::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Collection.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Element >*
Mission_Collection::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:pb.mission.Mission.Collection.elements)
  return &elements_;
}
inline const ::pb::mission::Mission_Element& Mission_Collection::elements(int index) const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Collection.elements)
  return elements_.Get(index);
}
inline ::pb::mission::Mission_Element* Mission_Collection::add_elements() {
  // @@protoc_insertion_point(field_add:pb.mission.Mission.Collection.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Element >&
Mission_Collection::elements() const {
  // @@protoc_insertion_point(field_list:pb.mission.Mission.Collection.elements)
  return elements_;
}

// -------------------------------------------------------------------

// Mission_Component

// .pb.mission.Mission.Element element = 1;
inline bool Mission_Component::has_element() const {
  return component_case() == kElement;
}
inline void Mission_Component::set_has_element() {
  _oneof_case_[0] = kElement;
}
inline void Mission_Component::clear_element() {
  if (has_element()) {
    delete component_.element_;
    clear_has_component();
  }
}
inline const ::pb::mission::Mission_Element& Mission_Component::_internal_element() const {
  return *component_.element_;
}
inline ::pb::mission::Mission_Element* Mission_Component::release_element() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Component.element)
  if (has_element()) {
    clear_has_component();
      ::pb::mission::Mission_Element* temp = component_.element_;
    component_.element_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::mission::Mission_Element& Mission_Component::element() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Component.element)
  return has_element()
      ? *component_.element_
      : *reinterpret_cast< ::pb::mission::Mission_Element*>(&::pb::mission::_Mission_Element_default_instance_);
}
inline ::pb::mission::Mission_Element* Mission_Component::mutable_element() {
  if (!has_element()) {
    clear_component();
    set_has_element();
    component_.element_ = CreateMaybeMessage< ::pb::mission::Mission_Element >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Component.element)
  return component_.element_;
}

// .pb.mission.Mission.Collection collection = 2;
inline bool Mission_Component::has_collection() const {
  return component_case() == kCollection;
}
inline void Mission_Component::set_has_collection() {
  _oneof_case_[0] = kCollection;
}
inline void Mission_Component::clear_collection() {
  if (has_collection()) {
    delete component_.collection_;
    clear_has_component();
  }
}
inline const ::pb::mission::Mission_Collection& Mission_Component::_internal_collection() const {
  return *component_.collection_;
}
inline ::pb::mission::Mission_Collection* Mission_Component::release_collection() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.Component.collection)
  if (has_collection()) {
    clear_has_component();
      ::pb::mission::Mission_Collection* temp = component_.collection_;
    component_.collection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::mission::Mission_Collection& Mission_Component::collection() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.Component.collection)
  return has_collection()
      ? *component_.collection_
      : *reinterpret_cast< ::pb::mission::Mission_Collection*>(&::pb::mission::_Mission_Collection_default_instance_);
}
inline ::pb::mission::Mission_Collection* Mission_Component::mutable_collection() {
  if (!has_collection()) {
    clear_component();
    set_has_collection();
    component_.collection_ = CreateMaybeMessage< ::pb::mission::Mission_Collection >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.Component.collection)
  return component_.collection_;
}

inline bool Mission_Component::has_component() const {
  return component_case() != COMPONENT_NOT_SET;
}
inline void Mission_Component::clear_has_component() {
  _oneof_case_[0] = COMPONENT_NOT_SET;
}
inline Mission_Component::ComponentCase Mission_Component::component_case() const {
  return Mission_Component::ComponentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Mission

// string name = 1;
inline void Mission::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mission::name() const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.name)
  return name_.GetNoArena();
}
inline void Mission::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.mission.Mission.name)
}
#if LANG_CXX11
inline void Mission::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.mission.Mission.name)
}
#endif
inline void Mission::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.mission.Mission.name)
}
inline void Mission::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.mission.Mission.name)
}
inline ::std::string* Mission::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mission::release_name() {
  // @@protoc_insertion_point(field_release:pb.mission.Mission.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mission::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.mission.Mission.name)
}

// repeated .pb.mission.Mission.Component components = 2;
inline int Mission::components_size() const {
  return components_.size();
}
inline void Mission::clear_components() {
  components_.Clear();
}
inline ::pb::mission::Mission_Component* Mission::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mission.Mission.components)
  return components_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Component >*
Mission::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:pb.mission.Mission.components)
  return &components_;
}
inline const ::pb::mission::Mission_Component& Mission::components(int index) const {
  // @@protoc_insertion_point(field_get:pb.mission.Mission.components)
  return components_.Get(index);
}
inline ::pb::mission::Mission_Component* Mission::add_components() {
  // @@protoc_insertion_point(field_add:pb.mission.Mission.components)
  return components_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::mission::Mission_Component >&
Mission::components() const {
  // @@protoc_insertion_point(field_list:pb.mission.Mission.components)
  return components_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mission_2eproto
